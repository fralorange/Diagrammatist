<?xml version="1.0" encoding="utf-8" ?>
<Frame xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:loc="clr-namespace:LocalizationResourceManager.Maui;assembly=LocalizationResourceManager.Maui"
       xmlns:controls="clr-namespace:DiagramApp.Client.Controls"
       xmlns:viewmodel="clr-namespace:DiagramApp.Client.ViewModels"
       xmlns:wrappers="clr-namespace:DiagramApp.Client.ViewModels.Wrappers"
       xmlns:components="clr-namespace:DiagramApp.Client.Components"
       x:Class="DiagramApp.Client.Components.EditorView"
       x:DataType="viewmodel:MainViewModel"
       VerticalOptions="FillAndExpand">
    <Frame.Resources>
        <ResourceDictionary>
            <!--Refactor flyoutbase.contextflyout and other repeating stuff-->
            <DataTemplate x:Key="PathFigureTemplate"
                          x:DataType="wrappers:ObservablePathFigure">
                <Path Data="{Binding PathData, Converter={StaticResource PathDataToDataConverter}}"
                      Style="{StaticResource Shape}"
                      Aspect="{Binding Aspect, Mode=OneWay, Converter={StaticResource BoolToAspectRatioConverter}}"
                      TranslationX="{Binding TranslationX, Mode=TwoWay}"
                      TranslationY="{Binding TranslationY, Mode=TwoWay}"
                      WidthRequest="{Binding Width, Mode=OneWay}"
                      HeightRequest="{Binding Height, Mode=OneWay}"
                      Rotation="{Binding Rotation, Mode=OneWay}"
                      ZIndex="{Binding ZIndex, Mode=OneWay}"
                      InputTransparent="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=CurrentCanvas.IsBlocked}">
                    <Path.GestureRecognizers>
                        <PanGestureRecognizer PanUpdated="OnPanElementUpdated"/>
                        <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SelectItemInCanvasCommand}"
                                              CommandParameter="{Binding .}"/>
                        <PointerGestureRecognizer PointerEntered="OnPointerElementEntered"/>
                    </Path.GestureRecognizers>
                    <FlyoutBase.ContextFlyout>
                        <MenuFlyout>
                            <MenuFlyoutItem Text="{loc:Translate BringForward}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=BringItemForwardCommand}"
                                                CommandParameter="{Binding .}"/>
                            <MenuFlyoutItem Text="{loc:Translate SendBackward}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SendItemBackwardCommand}"
                                                CommandParameter="{Binding .}"/>
                            <MenuFlyoutSeparator/>
                            <MenuFlyoutItem Text="{loc:Translate Delete}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=DeleteItemFromCanvasCommand}"
                                                CommandParameter="{Binding .}"/>
                        </MenuFlyout>
                    </FlyoutBase.ContextFlyout>
                </Path>
            </DataTemplate>
            <DataTemplate x:Key="PathTextFigureTemplate"
                          x:DataType="wrappers:ObservablePathTextFigure">
                <Border StrokeThickness="0"
                        Background="Transparent"
                        TranslationX="{Binding TranslationX, Mode=TwoWay}"
                          TranslationY="{Binding TranslationY, Mode=TwoWay}"
                          WidthRequest="{Binding Width, Mode=OneWay}"
                          HeightRequest="{Binding Height, Mode=OneWay}"
                          Rotation="{Binding Rotation, Mode=OneWay}"
                          ZIndex="{Binding ZIndex, Mode=OneWay}"
                          InputTransparent="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=CurrentCanvas.IsBlocked}">
                    <Grid>
                        <Path Data="{Binding PathData, Converter={StaticResource PathDataToDataConverter}}"
                              Style="{StaticResource Shape}"
                              Aspect="{Binding Aspect, Mode=OneWay, Converter={StaticResource BoolToAspectRatioConverter}}"/>
                        <Label Text="{Binding Text}"
                               FontSize="{Binding FontSize}"
                               HorizontalTextAlignment="Center"
                               VerticalTextAlignment="Center"/>
                    </Grid>
                    <Border.GestureRecognizers>
                        <PanGestureRecognizer PanUpdated="OnPanElementUpdated"/>
                        <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SelectItemInCanvasCommand}"
                                              CommandParameter="{Binding .}"/>
                        <PointerGestureRecognizer PointerEntered="OnPointerElementEntered"/>
                    </Border.GestureRecognizers>
                    <FlyoutBase.ContextFlyout>
                        <MenuFlyout>
                            <MenuFlyoutItem Text="{loc:Translate BringForward}"
                                            Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=BringItemForwardCommand}"
                                            CommandParameter="{Binding .}"/>
                            <MenuFlyoutItem Text="{loc:Translate SendBackward}"
                                            Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SendItemBackwardCommand}"
                                            CommandParameter="{Binding .}"/>
                            <MenuFlyoutSeparator/>
                            <MenuFlyoutItem Text="{loc:Translate Delete}"
                                            Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=DeleteItemFromCanvasCommand}"
                                            CommandParameter="{Binding .}"/>
                        </MenuFlyout>
                    </FlyoutBase.ContextFlyout>
                </Border>
            </DataTemplate>
            <DataTemplate x:Key="PolylineFigureTemplate"
                          x:DataType="wrappers:ObservablePolylineFigure">
                <Polyline Points="{Binding Points, Converter={StaticResource PointsToPointCollectionConverter}}"
                          Style="{StaticResource Flow}"
                          StrokeThickness="{Binding Thickness, Mode=OneWay}"
                          StrokeDashArray="{Binding Dashed, Mode=OneWay, Converter={StaticResource BoolToStrokeDashArrayConverter}}"
                          StrokeLineJoin="{Binding LineJoin, Mode=OneWay}"
                          TranslationX="{Binding TranslationX, Mode=TwoWay}"
                          TranslationY="{Binding TranslationY, Mode=TwoWay}"
                          Rotation="{Binding Rotation, Mode=OneWay}"
                          ZIndex="{Binding ZIndex, Mode=OneWay}"
                          InputTransparent="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=CurrentCanvas.IsBlocked}">
                    <Polyline.GestureRecognizers>
                        <PanGestureRecognizer PanUpdated="OnPanElementUpdated"/>
                        <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SelectItemInCanvasCommand}"
                                              CommandParameter="{Binding .}"/>
                        <PointerGestureRecognizer PointerEntered="OnPointerElementEntered"/>
                    </Polyline.GestureRecognizers>
                    <FlyoutBase.ContextFlyout>
                        <MenuFlyout>
                            <MenuFlyoutItem Text="{loc:Translate BringForward}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=BringItemForwardCommand}"
                                                CommandParameter="{Binding .}"/>
                            <MenuFlyoutItem Text="{loc:Translate SendBackward}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SendItemBackwardCommand}"
                                                CommandParameter="{Binding .}"/>
                            <MenuFlyoutSeparator/>
                            <MenuFlyoutItem Text="{loc:Translate Delete}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=DeleteItemFromCanvasCommand}"
                                                CommandParameter="{Binding .}"/>
                        </MenuFlyout>
                    </FlyoutBase.ContextFlyout>
                </Polyline>
            </DataTemplate>
            <DataTemplate x:Key="TextFigureTemplate"
                          x:DataType="wrappers:ObservableTextFigure">
                <Border Style="{StaticResource TextBorder}"
                        TranslationX="{Binding TranslationX, Mode=TwoWay}"
                        TranslationY="{Binding TranslationY, Mode=TwoWay}"
                        Rotation="{Binding Rotation, Mode=OneWay}"
                        ZIndex="{Binding ZIndex, Mode=OneWay}"
                        InputTransparent="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=CurrentCanvas.IsBlocked}">
                    <Label Text="{Binding Text, Mode=OneWay}"
                           FontSize="{Binding FontSize, Mode=OneWay}"/>
                    <Border.Triggers>
                        <DataTrigger TargetType="Border"
                                     Binding="{Binding HasOutline}"
                                     Value="False">
                            <Setter Property="Stroke" Value="Transparent" />
                        </DataTrigger>
                        <DataTrigger TargetType="Border"
                                     Binding="{Binding HasBackground}"
                                     Value="False">
                            <Setter Property="BackgroundColor" Value="Transparent"/>
                        </DataTrigger>
                    </Border.Triggers>
                    <Border.GestureRecognizers>
                        <PanGestureRecognizer PanUpdated="OnPanElementUpdated"/>
                        <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SelectItemInCanvasCommand}"
                                              CommandParameter="{Binding .}"/>
                        <PointerGestureRecognizer PointerEntered="OnPointerElementEntered"/>
                    </Border.GestureRecognizers>
                    <FlyoutBase.ContextFlyout>
                        <MenuFlyout>
                            <MenuFlyoutItem Text="{loc:Translate BringForward}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=BringItemForwardCommand}"
                                                CommandParameter="{Binding .}"/>
                            <MenuFlyoutItem Text="{loc:Translate SendBackward}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=SendItemBackwardCommand}"
                                                CommandParameter="{Binding .}"/>
                            <MenuFlyoutSeparator/>
                            <MenuFlyoutItem Text="{loc:Translate Delete}"
                                                Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=DeleteItemFromCanvasCommand}"
                                                CommandParameter="{Binding .}"/>
                        </MenuFlyout>
                    </FlyoutBase.ContextFlyout>
                </Border>
                
            </DataTemplate>
            <components:FigureDataTemplateSelector x:Key="FigureSelector"
                                                   PathFigureTemplate="{StaticResource PathFigureTemplate}"
                                                   PathTextFigureTemplate="{StaticResource PathTextFigureTemplate}"
                                                   PolylineFigureTemplate="{StaticResource PolylineFigureTemplate}"
                                                   TextFigureTemplate="{StaticResource TextFigureTemplate}"/>
        </ResourceDictionary>
    </Frame.Resources>
    <Grid Padding="0">
        <controls:BindableScrollView x:Name="CanvasScrollWindow"
                                     HorizontalScrollBarVisibility="Always" 
                                     VerticalScrollBarVisibility="Always"  
                                     Orientation="Both"
                                     ScrollX="{Binding CurrentCanvas.Offset.X, Mode=OneWayToSource}"
                                     ScrollY="{Binding CurrentCanvas.Offset.Y, Mode=OneWayToSource}"
                                     Scroll="{Binding CurrentCanvas.Offset, Mode=OneWay}">
            
            <AbsoluteLayout x:Name="FrameCanvasContainer" 
                            WidthRequest="{Binding CurrentCanvas.ImaginaryWidth}" 
                            HeightRequest="{Binding CurrentCanvas.ImaginaryHeight}">

                <Border x:Name="CanvasView"
                        Style="{StaticResource CanvasBorder}"
                        BackgroundColor="{Binding CurrentCanvas.Settings.Background, Converter={StaticResource BackgroundTypeToColorConverter}}"
                        AbsoluteLayout.LayoutBounds="0, 0, 1, 1"
                        AbsoluteLayout.LayoutFlags="All"
                        WidthRequest="{Binding CurrentCanvas.Settings.Width}"
                        HeightRequest="{Binding CurrentCanvas.Settings.Height}"
                        Scale="{Binding CurrentCanvas.Zoom}"
                        Rotation="{Binding CurrentCanvas.Rotation}">
                    
                    <Border.Triggers>
                        <DataTrigger Binding="{Binding IsCanvasNotNull}" TargetType="Border" Value="False">
                            <Setter Property="Opacity" Value="0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCanvasNotNull}" TargetType="Border" Value="True">
                            <Setter Property="Opacity" Value="1" />
                        </DataTrigger>
                    </Border.Triggers>

                    <Grid>
                        <controls:VisibleGridView x:Name="CanvasGrid"
                                                  GridSpacing="{Binding CurrentCanvas.GridSpacing}"
                                                  IsVisible="{Binding CurrentCanvas.IsGridVisible}"/>
                        <AbsoluteLayout x:Name="CanvasContent"
                                        BindableLayout.ItemsSource="{Binding CurrentCanvas.Figures}"
                                        BindableLayout.ItemTemplateSelector="{StaticResource FigureSelector}">
                            <AbsoluteLayout.GestureRecognizers>
                                <PointerGestureRecognizer PointerMoved="OnPointerMovedInsideCanvas"
                                                          PointerExited="OnPointerExitedFromCanvas"/>
                                <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainViewModel}}, Path=ResetItemInCanvasCommand}"
                                                      Tapped="OnTappedInsideCanvas"/>
                            </AbsoluteLayout.GestureRecognizers>
                        </AbsoluteLayout>
                    </Grid>
                    
                </Border>

                <AbsoluteLayout.GestureRecognizers>
                    <PanGestureRecognizer PanUpdated="OnPanCanvasUpdated"/>
                    <PointerGestureRecognizer PointerEntered="OnPointerEntered"/>
                </AbsoluteLayout.GestureRecognizers>
            </AbsoluteLayout>
            
        </controls:BindableScrollView>

        <Frame x:Name="SlideoutConfirmationView"
               Padding="20"
               HorizontalOptions="Start"
               VerticalOptions="Center"
               IsVisible="{Binding CurrentCanvas.IsBlocked, FallbackValue={x:Boolean False}}">
            <VerticalStackLayout Spacing="5">
                <Button Text="&#x2713;"
                        ToolTipProperties.Text="Подтвердить"
                        Clicked="OnConfirmButtonClicked"/>
                <Button Text="&#x2A09;"
                        ToolTipProperties.Text="Отмена"
                        Clicked="OnCancelButtonClicked"/>
            </VerticalStackLayout>
        </Frame>
    </Grid>
</Frame>
